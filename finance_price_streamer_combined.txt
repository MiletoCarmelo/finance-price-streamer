==== ./Dockerfile ====

# Selection basis
FROM python:3.11.9

# Set working directory
WORKDIR /app

# Update pip and install Poetry
RUN pip install --upgrade pip && \
 pip install poetry

# Copier les fichiers de configuration poetry
COPY pyproject.toml poetry.lock ./
RUN poetry config virtualenvs.create false \
    && poetry install --no-interaction --no-ansi --no-root

# Copier le code source
COPY price_streamer/ price_streamer/
 
# Exposer le port 8000
EXPOSE 8000

# Commande de démarrage
# CMD ["python", "-m", "price_streamer"]
CMD ["poetry", "run", "python", "-m", "price_streamer"]

==== ./price_streamer/__init__.py ====

# price_streamer/__init__.py

from .streamer import PriceStreamer
from .sources.base import DataSourceBase
from .sources.yahoo_finance import YahooFinanceSource

__version__ = "1.0.0"

==== ./price_streamer/main.py ====

# price-streamer/main.py
import argparse
import logging
from .sources.yahoo_finance import YahooFinanceSource
from .streamer import PriceStreamer
import uvicorn
from .api import app
import os
import asyncio
from fastapi import FastAPI
from threading import Thread

app = FastAPI()

@app.get("/health/live")
async def liveness():
    return {"status": "ok"}

@app.get("/health/ready") 
async def readiness():
    return {"status": "ok"}

def run_server():
    uvicorn.run(app, host="0.0.0.0", port=8000)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_env_or_default(key: str, default: str) -> str:
    return os.getenv(key, default)

def main():
    parser = argparse.ArgumentParser(description='Finance Price Streamer')
    parser.add_argument('--api', action='store_true', help='Lancer en mode API')
    parser.add_argument('--source', type=str, default='yahoo', choices=['yahoo'])
    parser.add_argument('--symbol', type=str)
    parser.add_argument('--days', type=int)
    parser.add_argument('--speed', type=float)
    parser.add_argument(
        '--kafka-servers',
        type=str,
        default=os.getenv('KAFKA_BOOTSTRAP_SERVERS', 'localhost:9092'),
        help='Liste des serveurs Kafka (séparés par des virgules)'
    )
    parser.add_argument('--kafka-topic', type=str, default='finance-price-stream')

    args = parser.parse_args()

    # Démarrer le serveur HTTP dans un thread séparé seulement si --api n'est pas utilisé
    if not args.api:
        server_thread = Thread(target=run_server, daemon=True)
        server_thread.start()

    # Si --api est True, on démarre uniquement le serveur HTTP
    if args.api:
        uvicorn.run(app, host="0.0.0.0", port=8000)
        return

    # Utilisation des variables d'environnement ou des arguments
    symbol = args.symbol or get_env_or_default('DEFAULT_SYMBOL', 'JPY')
    days = args.days or int(get_env_or_default('DEFAULT_DAYS', '3'))
    speed = args.speed or float(get_env_or_default('DEFAULT_SPEED', '1.0'))
    kafka_servers = args.kafka_servers or get_env_or_default('KAFKA_BOOTSTRAP_SERVERS', 'localhost:9092')

    kafka_config = {
        'bootstrap_servers': kafka_servers.split(',')
    }

    print(kafka_config)

    try:
        streamer = PriceStreamer(
            data_source=YahooFinanceSource(),
            kafka_config=kafka_config
        )

        print(f"Using Kafka config: {kafka_config}")  # Pour le debug

        streamer.stream(
            symbol=symbol,
            lookback_days=days,
            replay_speed=speed,
            topic=args.kafka_topic
        )
    except KeyboardInterrupt:
        logger.info("Arrêt du streaming")
    except Exception as e:
        logger.error(f"Erreur: {str(e)}")
        raise

if __name__ == "__main__":
    main()

==== ./price_streamer/sources/__init__.py ====

from .base import DataSourceBase
from .yahoo_finance import YahooFinanceSource

__all__ = ['DataSourceBase', 'YahooFinanceSource']

==== ./price_streamer/sources/yahoo_finance.py ====

from .base import DataSourceBase
import yfinance as yf
from datetime import datetime, timedelta
import pandas as pd
import logging

logger = logging.getLogger(__name__)

class YahooFinanceSource(DataSourceBase):
    def validate_symbol(self, symbol: str) -> str:
        """Ajoute =X pour les paires forex si nécessaire"""
        return f"{symbol}=X" if not "=" in symbol else symbol

    def get_source_name(self) -> str:
        return "yahoo_finance"

    def fetch_historical_data(self, symbol: str, lookback_days: int) -> pd.DataFrame:
        try:
            end_date = datetime.now()
            start_date = end_date - timedelta(days=lookback_days)
            
            symbol = self.validate_symbol(symbol)
            logger.info(f"Fetching data for {symbol} from {start_date} to {end_date}")
            
            ticker = yf.Ticker(symbol)
            data = ticker.history(
                start=start_date,
                end=end_date,
                interval='1m'
            )
            
            if data.empty:
                raise ValueError(f"No data found for symbol {symbol}")
                
            logger.info(f"Retrieved {len(data)} data points")
            return data
            
        except Exception as e:
            logger.error(f"Error fetching data: {str(e)}")
            raise

==== ./price_streamer/sources/base.py ====

from abc import ABC, abstractmethod
from typing import Dict, Any
import pandas as pd

class DataSourceBase(ABC):
    @abstractmethod
    def fetch_historical_data(self, symbol: str, lookback_days: int) -> pd.DataFrame:
        """
        Récupère les données historiques depuis la source
        
        Args:
            symbol: Symbole de trading
            lookback_days: Nombre de jours d'historique
            
        Returns:
            DataFrame avec colonnes: [open, high, low, close, volume]
        """
        pass

    @abstractmethod
    def validate_symbol(self, symbol: str) -> str:
        """
        Valide et formate le symbole selon la source
        
        Args:
            symbol: Symbole à valider
            
        Returns:
            Symbole formaté
        """
        pass

    @abstractmethod
    def get_source_name(self) -> str:
        """Retourne le nom de la source"""
        pass

==== ./price_streamer/__main__.py ====

# price_streamer/__main__.py
from .main import main

if __name__ == "__main__":
    main()

==== ./price_streamer/api.py ====

# price_streamer/api.py
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
import threading
import logging
from .streamer import PriceStreamer
from .sources.yahoo_finance import YahooFinanceSource
import os

app = FastAPI()
logger = logging.getLogger(__name__)

class StreamConfig(BaseModel):
    symbol: str
    days: int = 3
    speed: float = 1.0

class StreamerState:
    def __init__(self):
        self.current_stream = None
        self.stream_thread = None
        self.config = None
        self.kafka_config = {
            'bootstrap_servers': os.getenv('KAFKA_SERVERS', 'kafka-service:9092').split(',')
        }
        
    def start_streaming(self, config: StreamConfig):
        if self.stream_thread and self.stream_thread.is_alive():
            self.stop_streaming()
            
        self.config = config
        self.current_stream = PriceStreamer(
            data_source=YahooFinanceSource(),
            kafka_config=self.kafka_config
        )
        
        self.stream_thread = threading.Thread(
            target=self.current_stream.stream,
            kwargs={
                'symbol': config.symbol,
                'lookback_days': config.days,
                'replay_speed': config.speed
            }
        )
        self.stream_thread.start()
        
    def stop_streaming(self):
        if self.current_stream:
            self.current_stream.stop_streaming = True
            if self.stream_thread:
                self.stream_thread.join()

state = StreamerState()

@app.get("/status")
async def get_status():
    if state.stream_thread and state.stream_thread.is_alive():
        return {
            "status": "running",
            "config": state.config.dict() if state.config else None
        }
    return {"status": "stopped"}

@app.post("/start")
async def start_stream(config: StreamConfig):
    try:
        state.start_streaming(config)
        return {"message": f"Started streaming {config.symbol}"}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/stop")
async def stop_stream():
    state.stop_streaming()
    return {"message": "Stopped streaming"}

==== ./price_streamer/streamer.py ====

# price_streamer/streamer.py
from kafka import KafkaProducer
from kafka.errors import NoBrokersAvailable
from .sources.base import DataSourceBase
import json
import time
import logging
from typing import Dict, Any

logger = logging.getLogger(__name__)

class PriceStreamer:
    def __init__(self, data_source: DataSourceBase, kafka_config: Dict[str, Any]):
        self.data_source = data_source
        self.kafka_config = kafka_config
        self.producer = None
        self.stop_streaming = False
        self.connect_to_kafka()

    def connect_to_kafka(self, max_retries=5, retry_delay=5):
        """Établit la connexion à Kafka avec retry"""
        retries = 0
        while retries < max_retries:
            try:
                logger.info(f"Tentative de connexion à Kafka: {self.kafka_config['bootstrap_servers']}")
                self.producer = KafkaProducer(
                    value_serializer=lambda x: json.dumps(x, default=str).encode('utf-8'),
                    **self.kafka_config
                )
                logger.info("Connexion à Kafka établie avec succès")
                return
            except NoBrokersAvailable:
                retries += 1
                if retries == max_retries:
                    logger.error(f"Impossible de se connecter à Kafka après {max_retries} tentatives")
                    raise
                logger.warning(f"Tentative {retries}/{max_retries} échouée, nouvelle tentative dans {retry_delay}s")
                time.sleep(retry_delay)
            except Exception as e:
                logger.error(f"Erreur inattendue lors de la connexion à Kafka: {str(e)}")
                raise

    def stream(self, symbol: str, lookback_days: int, replay_speed: float = 1.0, topic: str = 'finance-price-stream'):
        """Stream les données historiques"""
        try:
            self.stop_streaming = False
            data = self.data_source.fetch_historical_data(symbol, lookback_days)
            
            logger.info(f"Starting stream for {symbol} to topic {topic}")
            
            for timestamp, row in data.iterrows():
                if self.stop_streaming:
                    logger.info("Stopping stream on request")
                    break
                    
                message = {
                    'symbol': symbol,
                    'source': self.data_source.get_source_name(),
                    'timestamp': str(timestamp),
                    'data': {
                        'open': float(row['Open']),
                        'high': float(row['High']),
                        'low': float(row['Low']),
                        'close': float(row['Close']),
                        'volume': float(row.get('Volume', 0))
                    }
                }
                
                if not self.producer:
                    logger.error("Pas de connexion Kafka disponible")
                    break

                self.producer.send(topic, message)
                logger.info(f"Streamed to {topic}: {symbol} - Close: {message['data']['close']}")
                
                time.sleep(60 / replay_speed)
                
        except Exception as e:
            logger.error(f"Streaming error: {str(e)}")
            raise

==== ./pyproject.toml ====

[tool.poetry]
name = "finance-price-streamer"
version = "0.1.0"
description = ""
authors = ["mileto <carmeloenzomileto@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11.9"
pandas = "^2.2.3"
yfinance = "^0.2.50"
kafka-python = "^2.0.2"
pytest = "^8.3.4"
python-dotenv = "^1.0.1"
fastapi = "^0.115.5"
uvicorn = "^0.32.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


==== ./tests/test_streamer.py ====

import pytest
from price_streamer.sources.base import DataSourceBase
from price_streamer.streamer import PriceStreamer
import pandas as pd
from datetime import datetime, timedelta

class MockDataSource(DataSourceBase):
    def validate_symbol(self, symbol: str) -> str:
        return symbol

    def get_source_name(self) -> str:
        return "mock"

    def fetch_historical_data(self, symbol: str, lookback_days: int) -> pd.DataFrame:
        dates = pd.date_range(
            start=datetime.now() - timedelta(days=lookback_days),
            end=datetime.now(),
            freq='1min'
        )
        
        data = {
            'Open': [100.0] * len(dates),
            'High': [101.0] * len(dates),
            'Low': [99.0] * len(dates),
            'Close': [100.5] * len(dates),
            'Volume': [1000] * len(dates)
        }
        
        return pd.DataFrame(data, index=dates)

def test_streamer_initialization():
    kafka_config = {'bootstrap_servers': ['localhost:9092']}
    source = MockDataSource()
    streamer = PriceStreamer(source, kafka_config)
    assert streamer.data_source == source

def test_mock_data_source():
    source = MockDataSource()
    data = source.fetch_historical_data("TEST", 1)
    assert not data.empty
    assert 'Open' in data.columns
    assert 'Close' in data.columns

